(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{656:function(a,t,s){"use strict";s.r(t);var n=s(20),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),s("p",[s("code",[a._v("import")]),a._v("关键字是用来导入包的。为使用定义在不同包中的Java类，需用import语句来引入指定包层次下所需要的类或全部类(.*)。"),s("code",[a._v("import")]),a._v("语句告诉编译器到哪里去寻找类。")]),a._v(" "),s("h2",{attrs:{id:"语法格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法格式"}},[a._v("#")]),a._v(" 语法格式")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v("  包名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" 类名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h2",{attrs:{id:"注意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[a._v("#")]),a._v(" 注意")]),a._v(" "),s("ul",[s("li",[a._v("在源文件中使用import显式的导入指定包下的类或接口")]),a._v(" "),s("li",[a._v("声明在包的声明和类的声明之间。")]),a._v(" "),s("li",[a._v("如果需要导入多个类或接口，那么就并列显式多个"),s("code",[a._v("import")]),a._v("语句即可")]),a._v(" "),s("li",[a._v("举例：可以使用"),s("code",[a._v("java.util.*")]),a._v("的方式，一次性导入util包下所有的类或接口。")]),a._v(" "),s("li",[a._v("如果导入的类或接口是"),s("code",[a._v("java.lang")]),a._v("包下的，或者是当前包下的，则可以省略此"),s("code",[a._v("import")]),a._v("语句。")]),a._v(" "),s("li",[a._v("如果在代码中使用不同包下的同名的类。那么就需要使用类的全类名的方式指明调用的是哪个类。")]),a._v(" "),s("li",[a._v("如果已经导入java.a包下的类。那么如果需要使用a包的子包下的类的话，仍然需要导入。")]),a._v(" "),s("li",[a._v("import static组合的使用：调用指定类或接口下的静态的属性或方法")])]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("code",[a._v("out")]),a._v("其实是"),s("code",[a._v("System")]),a._v("类的静态属性")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("random")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("code",[a._v("random()")]),a._v("其实也是"),s("code",[a._v("Math")]),a._v("类中的静态方法")]),a._v(" "),s("p",[a._v("如果在头文件分别声明他们，那么上面两行代码可以这样写：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('out.println("Hello");\nrandom();\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("(不过，我们不建议这么写，可读性差)")])])}),[],!1,null,null,null);t.default=e.exports}}]);