(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{552:function(t,s,a){"use strict";a.r(s);var n=a(15),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"抽象类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[t._v("#")]),t._v(" 抽象类")]),t._v(" "),a("p",[t._v("随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。类的设计应该保证父类和子类能够共享特征。有时将一个父类设计得非常抽象，以至于它没有具体的实例，这样的类叫做抽象类。")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201216104929.png",alt:"image-20201216104928967"}}),t._v(" "),a("blockquote",[a("p",[t._v("用"),a("code",[t._v("abstract")]),t._v("关键字来修饰一个类，这个类叫做"),a("strong",[t._v("抽象类")]),t._v("。")])]),t._v(" "),a("p",[a("strong",[t._v("抽象类不能实例化。")])]),t._v(" "),a("p",[a("strong",[t._v("抽象类中一定有构造器，便于子类实例化时调用。（涉及：子类对象实例化的全过程）")])]),t._v(" "),a("p",[a("strong",[t._v("开发中，都会提供抽象类的子类，让子类对象可以实例化，完成相关的操作。")])]),t._v(" "),a("h2",{attrs:{id:"抽象方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象方法"}},[t._v("#")]),t._v(" 抽象方法")]),t._v(" "),a("blockquote",[a("p",[t._v("用"),a("code",[t._v("abstract")]),t._v("来修饰一个方法，该方法叫做"),a("strong",[t._v("抽象方法")]),t._v("。")])]),t._v(" "),a("p",[t._v("抽象方法：只有方法的声明，没有方法的实现。以分号结束：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("talk")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("**含有抽象方法的类必须被声明为抽象类。**反之，抽象类中可以没有抽象方法。")]),t._v(" "),a("p",[a("strong",[t._v("抽象类是用来被继承的，抽象类的子类必须重写父类的抽象方法，并提供方法体。")])]),t._v(" "),a("p",[a("strong",[t._v("若没有重写全部的抽象方法，仍为抽象类。")])]),t._v(" "),a("p",[t._v("不能用"),a("code",[t._v("abstract")]),t._v("修饰变量、代码块、构造器；")]),t._v(" "),a("p",[t._v("不能用"),a("code",[t._v("abstract")]),t._v("修饰私有方法、静态方法、final的方法、final的类。")]),t._v(" "),a("h2",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),a("blockquote",[a("p",[t._v("抽象类是用来模型化那些父类无法确定全部实现，而是由其子类提供具体实现的对象的类。")])]),t._v(" "),a("p",[t._v("抽象类和抽象方法的应用场景，其实在于规范。")]),t._v(" "),a("p",[t._v("比如：")]),t._v(" "),a("p",[t._v("几何图形有很多种，那么每种图形的面积、体积计算方式都不一致，可以定义一个几何图形抽象类，然后具体图形全部继承抽象类，抽象类声明一个方法，例如求面积或者体积，那么它的子类必须重写这个方法。")]),t._v(" "),a("p",[t._v("比如：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201216130146.png",alt:"image-20201216130146012"}})]),t._v(" "),a("p",[t._v("在航运公司系统中，Vehicle类需要定义两个方法分别计算运输工具的燃料效率和行驶距离。")]),t._v(" "),a("p",[t._v("卡车(Truck)和驳船(RiverBarge)的燃料效率和行驶距离的计算方法完全不同。Vehicle类不能提供计算方法，但子类可以。")]),t._v(" "),a("blockquote",[a("p",[t._v("多态的应用：模板方法设计模式("),a("code",[t._v("TemplateMethod")]),t._v(")")])]),t._v(" "),a("p",[t._v("抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。")]),t._v(" "),a("p",[t._v("解决问题：")]),t._v(" "),a("ul",[a("li",[t._v("当功能内部一部分实现是确定的，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。")]),t._v(" "),a("li",[t._v("换句话说，在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。")])]),t._v(" "),a("p",[t._v("模板方法设计模式是编程中经常用得到的模式。")]),t._v(" "),a("p",[t._v("各个框架、类库中都有他的影子，比如常见的有：")]),t._v(" "),a("ul",[a("li",[t._v("数据库访问的封装")]),t._v(" "),a("li",[t._v("Junit单元测试")]),t._v(" "),a("li",[t._v("JavaWeb的Servlet中关于doGet/doPost方法调用")]),t._v(" "),a("li",[t._v("Hibernate中模板程序")]),t._v(" "),a("li",[t._v("Spring中JDBCTemlate、HibernateTemplate等")])]),t._v(" "),a("h2",{attrs:{id:"抽象类的匿名子对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象类的匿名子对象"}},[t._v("#")]),t._v(" 抽象类的匿名子对象")]),t._v(" "),a("p",[t._v("有时候，我们对一个抽象类也不能确定具体实现类是什么，可以这样来写:")]),t._v(" "),a("p",[t._v("比如Person类是抽象类，有2个抽象方法：eat和walk")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"吃饭"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("walk")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"走路"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("本来抽象类不能被实例化，但是现在写的是抽象类的匿名子类对象，直接重写，有时候方法不复杂，或者只使用一次，可以使用这种快捷方便的写法。")]),t._v(" "),a("p",[t._v("当也可以写匿名子类的匿名对象，连返回值都不用了。")])])}),[],!1,null,null,null);s.default=e.exports}}]);