(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{695:function(v,_,e){"use strict";e.r(_);var s=e(15),t=Object(s.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"_1、认识pv-pvc-storageclass"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、认识pv-pvc-storageclass"}},[v._v("#")]),v._v(" 1、认识PV/PVC/StorageClass")]),v._v(" "),e("h4",{attrs:{id:"_1-1-介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-介绍"}},[v._v("#")]),v._v(" "),e("strong",[v._v("1.1 介绍")])]),v._v(" "),e("p",[v._v("管理存储是管理计算的一个明显问题。该"),e("code",[v._v("PersistentVolume")]),v._v("子系统为用户和管理员提供了一个API，用于抽象如何根据消费方式提供存储的详细信息。为此，我们引入了两个新的"),e("strong",[v._v("API资源")]),v._v("："),e("code",[v._v("PersistentVolume")]),v._v("和"),e("code",[v._v("PersistentVolumeClaim")])]),v._v(" "),e("p",[e("code",[v._v("PersistentVolume")]),v._v("（"),e("strong",[v._v("PV")]),v._v("）是集群中由管理员配置的"),e("strong",[v._v("一段网络存储")]),v._v("。 它是集群中的资源，就像节点是集群资源一样。 PV是容量插件，如Volumes，但其生命周期独立于使用PV的任何单个pod。 此API对象捕获存储实现的详细信息，包括NFS，iSCSI或特定于云提供程序的存储系统。")]),v._v(" "),e("p",[e("code",[v._v("PersistentVolumeClaim")]),v._v("（"),e("strong",[v._v("PVC")]),v._v("）是由"),e("strong",[v._v("用户进行存储的请求")]),v._v("。 它类似于pod。 Pod消耗节点资源，PVC消耗PV资源。Pod可以请求特定级别的资源（CPU和内存）。声明可以请求特定的大小和访问模式（例如，可以一次读/写或多次只读）。")]),v._v(" "),e("p",[v._v("虽然PersistentVolumeClaims允许用户使用抽象存储资源，但是PersistentVolumes对于不同的问题，用户通常需要具有不同属性（例如性能）。群集管理员需要能够提供各种PersistentVolumes不同的方式，而不仅仅是大小和访问模式，而不会让用户了解这些卷的实现方式。对于这些需求，有"),e("strong",[v._v("StorageClass 资源。")])]),v._v(" "),e("p",[v._v("StorageClass为管理员提供了一种描述他们提供的存储的“类”的方法。 不同的类可能映射到服务质量级别，或备份策略，或者由群集管理员确定的任意策略。 Kubernetes本身对于什么类别代表是不言而喻的。 这个概念有时在其他存储系统中称为“配置文件”。")]),v._v(" "),e("p",[e("strong",[v._v("PVC和PV是一一对应的。")])]),v._v(" "),e("h4",{attrs:{id:"_1-2-生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-生命周期"}},[v._v("#")]),v._v(" "),e("strong",[v._v("1.2 生命周期")])]),v._v(" "),e("p",[v._v("PV是群集中的资源。PVC是对这些资源的请求，并且还充当对资源的检查。PV和PVC之间的相互作用遵循以下生命周期：")]),v._v(" "),e("p",[v._v("Provisioning ——-> Binding ——–>Using——>Releasing——>Recycling")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("供应准备Provisioning")]),v._v(" "),e("p",[v._v("---通过集群外的存储系统或者云平台来提供存储持久化支持。")]),v._v(" "),e("ul",[e("li",[v._v("- 静态提供Static：集群管理员创建多个PV。 它们携带可供集群用户使用的真实存储的详细信息。 它们存在于Kubernetes API中，可用于消费")]),v._v(" "),e("li",[v._v("- 动态提供Dynamic：当管理员创建的静态PV都不匹配用户的PersistentVolumeClaim时，集群可能会尝试为PVC动态配置卷。 此配置基于StorageClasses：PVC必须请求一个类，并且管理员必须已创建并配置该类才能进行动态配置。 要求该类的声明有效地为自己禁用动态配置。")])])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("绑定Binding")]),v._v("---用户创建pvc并指定需要的资源和访问模式。在找到可用pv之前，pvc会保持未绑定状态。")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("使用Using")]),v._v("---用户可在pod中像volume一样使用pvc。")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("释放Releasing")]),v._v("---用户删除pvc来回收存储资源，pv将变成“released”状态。由于还保留着之前的数据，这些数据需要根据不同的策略来处理，否则这些存储资源无法被其他pvc使用。")])]),v._v(" "),e("li",[e("p",[v._v("回收Recycling")]),v._v(" "),e("p",[v._v("---pv可以设置三种回收策略：保留（Retain），回收（Recycle）和删除（Delete）。")]),v._v(" "),e("ul",[e("li",[v._v("- 保留策略：允许人工处理保留的数据。")]),v._v(" "),e("li",[v._v("- 删除策略：将删除pv和外部关联的存储资源，需要插件支持。")]),v._v(" "),e("li",[v._v("- 回收策略：将执行清除操作，之后可以被新的pvc使用，需要插件支持。")])])])]),v._v(" "),e("p",[v._v("注：目前只有NFS和HostPath类型卷支持回收策略，AWS EBS,GCE PD,Azure Disk和Cinder支持删除(Delete)策略。")]),v._v(" "),e("h4",{attrs:{id:"_1-3-pv类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-pv类型"}},[v._v("#")]),v._v(" "),e("strong",[v._v("1.3 PV类型")])]),v._v(" "),e("ul",[e("li",[v._v("GCEPersistentDisk")]),v._v(" "),e("li",[v._v("AWSElasticBlockStore")]),v._v(" "),e("li",[v._v("AzureFile")]),v._v(" "),e("li",[v._v("AzureDisk")]),v._v(" "),e("li",[v._v("FC (Fibre Channel)")]),v._v(" "),e("li",[v._v("Flexvolume")]),v._v(" "),e("li",[v._v("Flocker")]),v._v(" "),e("li",[v._v("NFS")]),v._v(" "),e("li",[v._v("iSCSI")]),v._v(" "),e("li",[v._v("RBD (Ceph Block Device)")]),v._v(" "),e("li",[v._v("CephFS")]),v._v(" "),e("li",[v._v("Cinder (OpenStack block storage)")]),v._v(" "),e("li",[v._v("Glusterfs")]),v._v(" "),e("li",[v._v("VsphereVolume")]),v._v(" "),e("li",[v._v("Quobyte Volumes")]),v._v(" "),e("li",[v._v("HostPath (Single node testing only – local storage is not supported in any way and WILL NOT WORK in a multi-node cluster)")]),v._v(" "),e("li",[v._v("Portworx Volumes")]),v._v(" "),e("li",[v._v("ScaleIO Volumes")]),v._v(" "),e("li",[v._v("StorageOS")])]),v._v(" "),e("h4",{attrs:{id:"_1-4-pv卷阶段状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-pv卷阶段状态"}},[v._v("#")]),v._v(" "),e("strong",[v._v("1.4 PV卷阶段状态")])]),v._v(" "),e("ul",[e("li",[v._v("Available – 资源尚未被claim使用")]),v._v(" "),e("li",[v._v("Bound – 卷已经被绑定到claim了")]),v._v(" "),e("li",[v._v("Released – claim被删除，卷处于释放状态，但未被集群回收。")]),v._v(" "),e("li",[v._v("Failed – 卷自动回收失败")])])])}),[],!1,null,null,null);_.default=t.exports}}]);