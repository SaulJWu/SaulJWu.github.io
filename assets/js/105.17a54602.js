(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{737:function(v,a,t){"use strict";t.r(a);var e=t(20),_=Object(e.a)({},(function(){var v=this,a=v.$createElement,t=v._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[v._v("#")]),v._v(" 概念")]),v._v(" "),t("p",[v._v("IO是指Input/Output，即输入和输出。以内存为中心：")]),v._v(" "),t("ul",[t("li",[v._v("Input指从外部读入数据到内存，例如，把文件从磁盘读取到内存，从网络读取数据到内存等等。")]),v._v(" "),t("li",[v._v("Output指把数据从内存输出到外部，例如，把数据从内存写入到文件，把数据从内存输出到网络等等。")])]),v._v(" "),t("p",[v._v("为什么要把数据读到内存才能处理这些数据？因为代码是在内存中运行的，数据也必须读到内存，最终的表示方式无非是byte数组，字符串等，都必须存放在内存里。")]),v._v(" "),t("p",[v._v("从Java代码来看，输入实际上就是从外部，例如，硬盘上的某个文件，把内容读到内存，并且以Java提供的某种数据类型表示，例如，"),t("code",[v._v("byte[]")]),v._v("，"),t("code",[v._v("String")]),v._v("，这样，后续代码才能处理这些数据。")]),v._v(" "),t("p",[v._v("因为内存有“易失性”的特点，所以必须把处理后的数据以某种方式输出，例如，写入到文件。Output实际上就是把Java表示的数据格式，例如，"),t("code",[v._v("byte[]")]),v._v("，"),t("code",[v._v("String")]),v._v("等输出到某个地方。")]),v._v(" "),t("p",[v._v("IO流是一种顺序读写数据的模式，它的特点是单向流动。数据类似自来水一样在水管中流动，所以我们把它称为IO流。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20210107174728.jpeg",alt:"java-io"}})]),v._v(" "),t("h2",{attrs:{id:"java-io原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-io原理"}},[v._v("#")]),v._v(" Java IO原理")]),v._v(" "),t("ul",[t("li",[v._v("I/O是Input/Output的缩写，I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等。")]),v._v(" "),t("li",[v._v("Java程序中，对于数据的输入/输出操作以“流(stream)”的方式进行。")]),v._v(" "),t("li",[v._v("java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过标准的方法输入或输出数据。")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20210107183132.png",alt:"image-20210107183132236"}})]),v._v(" "),t("h2",{attrs:{id:"流的分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#流的分类"}},[v._v("#")]),v._v(" 流的分类")]),v._v(" "),t("ul",[t("li",[v._v("按操作"),t("strong",[v._v("数据单位")]),v._v("不同分为：字节流(8 bit)，字符流(16 bit)。")]),v._v(" "),t("li",[v._v("按数据流的"),t("strong",[v._v("流向")]),v._v("不同分为：输入流，输出流")]),v._v(" "),t("li",[v._v("按流的"),t("strong",[v._v("角色")]),v._v("的不同分为：节点流，处理流")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("抽象基类")]),v._v(" "),t("th",[v._v("字节流")]),v._v(" "),t("th",[v._v("字符流")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("输入流")]),v._v(" "),t("td",[v._v("InputStream")]),v._v(" "),t("td",[v._v("Reader")])]),v._v(" "),t("tr",[t("td",[v._v("输出流")]),v._v(" "),t("td",[v._v("OutputStream")]),v._v(" "),t("td",[v._v("Writer")])])])]),v._v(" "),t("ul",[t("li",[v._v("1、Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的")]),v._v(" "),t("li",[v._v("2、由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20210107183705.png",alt:"image-20210107183705165"}})]),v._v(" "),t("ul",[t("li",[v._v("IO流体系")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20210107184041.png",alt:"image-20210107184041032"}})]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("节点流和处理流：")])])]),v._v(" "),t("ul",[t("li",[v._v("节点流：直接从数据源或目的地读写数据。")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20210107184329.png",alt:"image-20210107184329592"}})]),v._v(" "),t("ul",[t("li",[v._v("处理流：不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20210107184343.png",alt:"image-20210107184343414"}})]),v._v(" "),t("h2",{attrs:{id:"inputstream-outputstream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inputstream-outputstream"}},[v._v("#")]),v._v(" InputStream / OutputStream")]),v._v(" "),t("p",[t("strong",[v._v("IO流以"),t("code",[v._v("byte")]),v._v("（字节）为最小单位，因此也称为"),t("em",[v._v("字节流")]),v._v("。")])]),v._v(" "),t("p",[v._v("例如，我们要从磁盘读入一个文件，包含6个字节，就相当于读入了6个字节的数据：")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("╔════════════╗\n║   Memory   ║\n╚════════════╝\n       ▲\n       │0x48\n       │0x65\n       │0x6c\n       │0x6c\n       │0x6f\n       │0x21\n ╔═══════════╗\n ║ Hard Disk ║\n ╚═══════════╝\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br"),t("span",{staticClass:"line-number"},[v._v("5")]),t("br"),t("span",{staticClass:"line-number"},[v._v("6")]),t("br"),t("span",{staticClass:"line-number"},[v._v("7")]),t("br"),t("span",{staticClass:"line-number"},[v._v("8")]),t("br"),t("span",{staticClass:"line-number"},[v._v("9")]),t("br"),t("span",{staticClass:"line-number"},[v._v("10")]),t("br"),t("span",{staticClass:"line-number"},[v._v("11")]),t("br"),t("span",{staticClass:"line-number"},[v._v("12")]),t("br"),t("span",{staticClass:"line-number"},[v._v("13")]),t("br")])]),t("p",[v._v("这6个字节是按顺序读入的，所以是输入字节流。")]),v._v(" "),t("p",[v._v("反过来，我们把6个字节从内存写入磁盘文件，就是输出字节流：")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("╔════════════╗\n║   Memory   ║\n╚════════════╝\n       │0x21\n       │0x6f\n       │0x6c\n       │0x6c\n       │0x65\n       │0x48\n       ▼\n ╔═══════════╗\n ║ Hard Disk ║\n ╚═══════════╝\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br"),t("span",{staticClass:"line-number"},[v._v("5")]),t("br"),t("span",{staticClass:"line-number"},[v._v("6")]),t("br"),t("span",{staticClass:"line-number"},[v._v("7")]),t("br"),t("span",{staticClass:"line-number"},[v._v("8")]),t("br"),t("span",{staticClass:"line-number"},[v._v("9")]),t("br"),t("span",{staticClass:"line-number"},[v._v("10")]),t("br"),t("span",{staticClass:"line-number"},[v._v("11")]),t("br"),t("span",{staticClass:"line-number"},[v._v("12")]),t("br"),t("span",{staticClass:"line-number"},[v._v("13")]),t("br")])]),t("p",[v._v("在Java中，"),t("code",[v._v("InputStream")]),v._v("代表输入字节流，"),t("code",[v._v("OuputStream")]),v._v("代表输出字节流，这是最基本的两种IO流。")]),v._v(" "),t("h2",{attrs:{id:"reader-writer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reader-writer"}},[v._v("#")]),v._v(" Reader / Writer")]),v._v(" "),t("p",[v._v("如果我们需要读写的是字符，并且字符不全是单字节表示的ASCII字符，那么，按照"),t("code",[v._v("char")]),v._v("来读写显然更方便，这种流称为"),t("em",[v._v("字符流")]),v._v("。")]),v._v(" "),t("p",[v._v("Java提供了"),t("code",[v._v("Reader")]),v._v("和"),t("code",[v._v("Writer")]),v._v("表示字符流，字符流传输的最小数据单位是"),t("code",[v._v("char")]),v._v("。")]),v._v(" "),t("p",[v._v("例如，我们把"),t("code",[v._v("char[]")]),v._v("数组"),t("code",[v._v("Hi你好")]),v._v("这4个字符用"),t("code",[v._v("Writer")]),v._v("字符流写入文件，并且使用UTF-8编码，得到的最终文件内容是8个字节，英文字符"),t("code",[v._v("H")]),v._v("和"),t("code",[v._v("i")]),v._v("各占一个字节，中文字符"),t("code",[v._v("你好")]),v._v("各占3个字节：")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("0x48\n0x69\n0xe4bda0\n0xe5a5bd\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br")])]),t("p",[v._v("反过来，我们用"),t("code",[v._v("Reader")]),v._v("读取以UTF-8编码的这8个字节，会从"),t("code",[v._v("Reader")]),v._v("中得到"),t("code",[v._v("Hi你好")]),v._v("这4个字符。")]),v._v(" "),t("p",[v._v("因此，"),t("code",[v._v("Reader")]),v._v("和"),t("code",[v._v("Writer")]),v._v("本质上是一个能自动编解码的"),t("code",[v._v("InputStream")]),v._v("和"),t("code",[v._v("OutputStream")]),v._v("。")]),v._v(" "),t("p",[v._v("使用"),t("code",[v._v("Reader")]),v._v("，数据源虽然是字节，但我们读入的数据都是"),t("code",[v._v("char")]),v._v("类型的字符，原因是"),t("code",[v._v("Reader")]),v._v("内部把读入的"),t("code",[v._v("byte")]),v._v("做了解码，转换成了"),t("code",[v._v("char")]),v._v("。使用"),t("code",[v._v("InputStream")]),v._v("，我们读入的数据和原始二进制数据一模一样，是"),t("code",[v._v("byte[]")]),v._v("数组，但是我们可以自己把二进制"),t("code",[v._v("byte[]")]),v._v("数组按照某种编码转换为字符串。究竟使用"),t("code",[v._v("Reader")]),v._v("还是"),t("code",[v._v("InputStream")]),v._v("，要取决于具体的使用场景。如果数据源不是文本，就只能使用"),t("code",[v._v("InputStream")]),v._v("，如果数据源是文本，使用Reader更方便一些。"),t("code",[v._v("Writer")]),v._v("和"),t("code",[v._v("OutputStream")]),v._v("是类似的。")]),v._v(" "),t("h2",{attrs:{id:"同步和异步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步"}},[v._v("#")]),v._v(" 同步和异步")]),v._v(" "),t("p",[v._v("同步IO是指，读写IO时代码必须等待数据返回后才继续执行后续代码，它的优点是代码编写简单，缺点是CPU执行效率低。")]),v._v(" "),t("p",[v._v("而异步IO是指，读写IO时仅发出请求，然后立刻执行后续代码，它的优点是CPU执行效率高，缺点是代码编写复杂。")]),v._v(" "),t("p",[v._v("Java标准库的包"),t("code",[v._v("java.io")]),v._v("提供了同步IO，而"),t("code",[v._v("java.nio")]),v._v("则是异步IO。上面我们讨论的"),t("code",[v._v("InputStream")]),v._v("、"),t("code",[v._v("OutputStream")]),v._v("、"),t("code",[v._v("Reader")]),v._v("和"),t("code",[v._v("Writer")]),v._v("都是同步IO的抽象类，对应的具体实现类，以文件为例，有"),t("code",[v._v("FileInputStream")]),v._v("、"),t("code",[v._v("FileOutputStream")]),v._v("、"),t("code",[v._v("FileReader")]),v._v("和"),t("code",[v._v("FileWriter")]),v._v("。")]),v._v(" "),t("p",[v._v("本节我们只讨论Java的同步IO，即输入/输出流的IO模型。")]),v._v(" "),t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[v._v("#")]),v._v(" 小结")]),v._v(" "),t("p",[v._v("IO流是一种流式的数据输入/输出模型：")]),v._v(" "),t("ul",[t("li",[v._v("二进制数据以"),t("code",[v._v("byte")]),v._v("为最小单位在"),t("code",[v._v("InputStream")]),v._v("/"),t("code",[v._v("OutputStream")]),v._v("中单向流动；")]),v._v(" "),t("li",[v._v("字符数据以"),t("code",[v._v("char")]),v._v("为最小单位在"),t("code",[v._v("Reader")]),v._v("/"),t("code",[v._v("Writer")]),v._v("中单向流动。")])]),v._v(" "),t("p",[v._v("Java标准库的"),t("code",[v._v("java.io")]),v._v("包提供了同步IO功能：")]),v._v(" "),t("ul",[t("li",[v._v("字节流接口："),t("code",[v._v("InputStream")]),v._v("/"),t("code",[v._v("OutputStream")]),v._v("；适合处理图像音频等非文本文件。")]),v._v(" "),t("li",[v._v("字符流接口："),t("code",[v._v("Reader")]),v._v("/"),t("code",[v._v("Writer")]),v._v("。适合处理文本文件。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);