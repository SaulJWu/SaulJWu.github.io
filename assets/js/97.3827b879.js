(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{538:function(t,v,_){"use strict";_.r(v);var a=_(20),i=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),_("h3",{attrs:{id:"为什么要了解数据结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要了解数据结构"}},[t._v("#")]),t._v(" 为什么要了解数据结构？")]),t._v(" "),_("p",[t._v("任何一个有志于从事IT领域的人员来说，数据结构("),_("code",[t._v("Data Structure")]),t._v(")是一门和计算机硬件和软件都密切相关的学科，它的研究重点是在计算的程序设计领域中探讨如何在计算机中组织和存储数据并进行高效率的运用，涉及的内容包括：")]),t._v(" "),_("ul",[_("li",[t._v("数据的逻辑关系")]),t._v(" "),_("li",[t._v("数据的存储结构")]),t._v(" "),_("li",[t._v("排序算法("),_("code",[t._v("Alegorithm")]),t._v(")")]),t._v(" "),_("li",[t._v("查找（或搜索）")]),t._v(" "),_("li",[t._v("……等等")])]),t._v(" "),_("p",[t._v("我们举一个形象的例子来理解数据结构的作用：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227031848.png",alt:"image-20201227031848540"}})]),t._v(" "),_("ul",[_("li",[_("p",[t._v("战场：程序运行所需的软件、硬件环境。")])]),t._v(" "),_("li",[_("p",[t._v("敌人：项目或模块的功能需求")])]),t._v(" "),_("li",[_("p",[t._v("指挥官：编写程序的程序员")])]),t._v(" "),_("li",[_("p",[t._v("士兵和装备：一行一行的代码")])]),t._v(" "),_("li",[_("p",[t._v("战术和策略：数据结构")])])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227031901.png",alt:"image-20201227031901193"}})]),t._v(" "),_("p",[t._v("如果没有数据结构，也就是没有战术和策略，打仗事倍功半，也就是开发程序事倍功半，程序运行也是事倍功半。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227031912.png",alt:"image-20201227031912748"}})]),t._v(" "),_("p",[t._v("如果有数据结构，有战术和策略，打仗事半功倍，也就是开发程序事半功倍，程序运行也是事半功倍。")]),t._v(" "),_("p",[t._v("简单来说，数据结构就是一种程序设计优化的方法论，研究数据的"),_("strong",[t._v("逻辑结构")]),t._v("和"),_("strong",[t._v("物理结构")]),t._v("以及它们之间的相互关系，并对这种结构定义响应的运算，目的是"),_("strong",[t._v("加快程序的执行速度、减少内存占用的空间。")])]),t._v(" "),_("p",[t._v("因此，数据结构和算法是一名程序开发人员的必备基本功，不是一朝一夕就能练成绝世高手的。冰冻三尺非一日之寒，需要我们平时不断的主动去学习积累。")]),t._v(" "),_("h3",{attrs:{id:"场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[t._v("#")]),t._v(" 场景")]),t._v(" "),_("p",[t._v("计算机的主要工作就是把数据(Data)经过某种运算处理转换为使用的信息(Information)。具体介绍一些数据结构的应用：")]),t._v(" "),_("ul",[_("li",[t._v("1、树形结构")])]),t._v(" "),_("p",[t._v("属性结构是一种相当重要的非线性数据结构，广泛运用在人类社会的族谱、机关的组织结构、计算机的操作系统结构、平面绘图应用、游戏设计等方面。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227024245.png",alt:"image-20201227024245394"}})]),t._v(" "),_("p",[t._v("上图：四叉树示意图")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227024319.png",alt:"image-20201227024319353"}})]),t._v(" "),_("p",[t._v("上图：地形与四叉树的对应关系")]),t._v(" "),_("ul",[_("li",[t._v("2、最短路径")])]),t._v(" "),_("p",[t._v("最短路径是指在众多不同的路径中距离最短或者所花费成本最少的路径。寻找最短路径最常见的应用是公共交通运输系统的规划或网络的假设，如都市公交系统、铁路运输系统、通信网络系统等。")]),t._v(" "),_("p",[t._v("现在很多汽车和手机都安装了GPS导航，用于定位和路况查询。其中路程的计算是以最短路径的理论作为程序设计的一句，为旅行者提供不同的路径作为选择方案。")]),t._v(" "),_("ul",[_("li",[t._v("3、搜索理论")])]),t._v(" "),_("p",[t._v("所谓“搜索引擎”，是一种自动从因特网的众多网站中查找信息，再经过一定的整理后提供给用户进行查询的系统，例如谷歌、百度、搜狗等搜索引擎。")]),t._v(" "),_("p",[t._v("注意，Search这个单词在网络上习惯范围为“搜索”，如搜索疫情。而在数据结构的算法描述中，习惯翻译成“查找”。在计算机科学中，“搜索”和“查找”大部分情况下可以互相转换。")]),t._v(" "),_("p",[t._v("Pascal之父Nicklaus Wirth： “Algorithms+Data Structures=Programs”")]),t._v(" "),_("p",[t._v("上面我们提到的数据结构和算法是程序设计实践中最基本的内涵。**程序能否快速而高效地完成预定的任务，取决于是否选对了数据结构，而程序是否能清楚而正确地把问题解决，则取决于算法。**算法是计算机处理信息的本质，因为计算机程序本质上是一个算法来告诉计算机确切的步骤来执行一个指定的任务。")]),t._v(" "),_("p",[t._v("所以大家认为：“"),_("strong",[t._v("Algorithms + Data Structures = Programs")]),t._v("”（出自：Pascal之父Nicklaus Wirth）")]),t._v(" "),_("p",[t._v("数据结构只是静态的描述了数据元素之间的关系。")]),t._v(" "),_("p",[t._v("高效的程序需要在数据结构的基础上设计和选择算法。")]),t._v(" "),_("p",[_("strong",[t._v("总结：算法是为了解决实际问题而设计的，数据结构是算法需要处理的问题载体。")])]),t._v(" "),_("h3",{attrs:{id:"数据结构的研究对象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据结构的研究对象"}},[t._v("#")]),t._v(" 数据结构的研究对象")]),t._v(" "),_("h4",{attrs:{id:"数据间的逻辑结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据间的逻辑结构"}},[t._v("#")]),t._v(" 数据间的逻辑结构")]),t._v(" "),_("p",[t._v("数据的逻辑结构指反映数据元素之间的逻辑关系的数据结构，其中的逻辑关系是指数据元素之间的前后件关系，而与他们在计算机中的存储位置无关。")]),t._v(" "),_("p",[_("strong",[t._v("逻辑结构包括：集合结构、线性结构、树形结构、图形结构。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227024528.png",alt:"image-20201227024528228"}})]),t._v(" "),_("ul",[_("li",[t._v("集合：数据元素之间只有“同属于一个集合”的关系")]),t._v(" "),_("li",[t._v("线性关系：数据元素之间存在一个对一个的关系，对应Java中的线性表：顺序表、链表、栈、队列。")]),t._v(" "),_("li",[t._v("树形结构：数据元素之间存在一个对多个的关系，对应Java中的树。比如：二叉树")]),t._v(" "),_("li",[t._v("网状结构(或图状结构)：数据元素之间存在多个对多个的关系，对应Java中的图")])]),t._v(" "),_("h4",{attrs:{id:"数据的存储结构-或物理结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据的存储结构-或物理结构"}},[t._v("#")]),t._v(" 数据的存储结构(或物理结构)")]),t._v(" "),_("p",[t._v("数据的存储结构(或物理结构)指数据的逻辑结构在计算机存储空间的存放形式。")]),t._v(" "),_("p",[t._v("数据的存储结构是数据结构在计算机中的表示（又称映像），它包括"),_("strong",[t._v("数据元素的机内表示")]),t._v("和"),_("strong",[t._v("关系的机内表示")]),t._v("。由于具体实现的方法有顺序、链接、索引、散列等多种，所以，一种数据结构可表示成一种或多种存储结构。")]),t._v(" "),_("p",[_("strong",[t._v("数据元素的机内表示（映像方法）：")]),t._v(" 用二进制位（bit）的位串表示数据元素。通常称这种位串为节点（node）。当数据元素有若干个数据项组成时，位串中与个数据项对应的子位串称为数据域（data field）。因此，节点是数据元素的机内表示（或机内映像）。")]),t._v(" "),_("p",[t._v("**关系的机内表示（映像方法）：**数据元素之间的关系的机内表示可以分为顺序映像和非顺序映像，常用两种存储结构：顺序存储结构和链式存储结构。顺序映像借助元素在存储器中的相对位置来表示数据元素之间的逻辑关系。非顺序映像借助指示元素存储位置的指针（pointer）来表示数据元素之间的逻辑关系。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227024716.png",alt:"image-20201227024716049"}})]),t._v(" "),_("h2",{attrs:{id:"真实结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#真实结构"}},[t._v("#")]),t._v(" 真实结构")]),t._v(" "),_("p",[t._v("在内存中真实存在的, 用来存放多个数据的内存结构。")]),t._v(" "),_("h3",{attrs:{id:"静态数据结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#静态数据结构"}},[t._v("#")]),t._v(" 静态数据结构")]),t._v(" "),_("blockquote",[_("p",[t._v("线性表之顺序表（或静态数据结构）：数组(Array)、ArrayList")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("特点：① 使用连续分配的内存空间；②一次申请一大段连续的空间, 需要事先声明最大可能要占用的固定内存空间")])]),t._v(" "),_("li",[_("p",[t._v("优点：设计简单，读取与修改表中任意一个元素的时间都是固定的")])]),t._v(" "),_("li",[_("p",[t._v("缺点：① 容易造成内存的浪费；② 删除或插入数据需要移动大量的数据")])])]),t._v(" "),_("h4",{attrs:{id:"存储思路"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#存储思路"}},[t._v("#")]),t._v(" "),_("strong",[t._v("存储思路")])]),t._v(" "),_("ul",[_("li",[t._v("所有数据存储在这个连续的空间中")]),t._v(" "),_("li",[t._v("数组中的每一个元素都是一个具体的数据\n"),_("ul",[_("li",[t._v("所有数据都紧密排布，不能有间隔")])])]),t._v(" "),_("li",[t._v("图示")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227025130.png",alt:"image-20201227025130562"}})]),t._v(" "),_("h4",{attrs:{id:"操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作"}},[t._v("#")]),t._v(" 操作")]),t._v(" "),_("ul",[_("li",[t._v("读内存：查:每个元素都有一个数值下标, 可以通过下标瞬间定位到某个元素")]),t._v(" "),_("li",[t._v("写内存：\n"),_("ul",[_("li",[t._v("增：\n"),_("ul",[_("li",[t._v("从头部插入")]),t._v(" "),_("li",[t._v("在中间插入")]),t._v(" "),_("li",[t._v("从尾部插入")]),t._v(" "),_("li",[t._v("注意：插入元素，引起部分元素后移，代价非常高")])])]),t._v(" "),_("li",[t._v("删：注意：去掉元素，引起部分元素前移，代价非常高")]),t._v(" "),_("li",[t._v("改：注意：只需要修改对应位置的元素的内容，不需要申请或者删除空间")])])])]),t._v(" "),_("h4",{attrs:{id:"适用范围"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#适用范围"}},[t._v("#")]),t._v(" 适用范围")]),t._v(" "),_("ul",[_("li",[t._v("查询操作远多于插入/删除操作的场景")]),t._v(" "),_("li",[t._v("简单抽象数据结构的基石")])]),t._v(" "),_("h3",{attrs:{id:"动态数据结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#动态数据结构"}},[t._v("#")]),t._v(" 动态数据结构")]),t._v(" "),_("blockquote",[_("p",[t._v("线性表之链表（或动态数据结构）：Linked List")])]),t._v(" "),_("ul",[_("li",[t._v("特点：① 使用不连续的内存空间；② 不需要提前声明好指定大小的内存空间。一次申请一小块内存，按需申请")]),t._v(" "),_("li",[t._v("优点：① 充分节省内存空间；② 数据的插入和删除方便，不需要移动大量数据")]),t._v(" "),_("li",[t._v("缺点：① 设计此数据结构较为麻烦；② 查找数据必须按顺序找到该数据为止，麻烦")])]),t._v(" "),_("h4",{attrs:{id:"存储思路-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#存储思路-2"}},[t._v("#")]),t._v(" 存储思路")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("每一个小数据单独存在一小块内存中，这个单元被称作结点(Node)")])]),t._v(" "),_("li",[_("p",[t._v("每一小块内存知道下一小块的地址")])]),t._v(" "),_("li",[_("p",[t._v("多个不连续的小内存空间组成, 通过内存地址引用形成一个链的结构")])]),t._v(" "),_("li",[_("p",[t._v("图示")])])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227025436.png",alt:"image-20201227025436935"}})]),t._v(" "),_("ul",[_("li",[t._v("表头：程序员获得表头就可以找到链表中所有的元素")]),t._v(" "),_("li",[t._v("表尾：有的链表有，有的没有")])]),t._v(" "),_("h4",{attrs:{id:"实现结构-链表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实现结构-链表"}},[t._v("#")]),t._v(" 实现结构：链表")]),t._v(" "),_("ul",[_("li",[t._v("单向链表")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227025537.png",alt:"image-20201227025537951"}})]),t._v(" "),_("ul",[_("li",[t._v("环形链表")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227025547.png",alt:"image-20201227025547604"}})]),t._v(" "),_("ul",[_("li",[t._v("双向链表")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227025601.png",alt:"image-20201227025601262"}})]),t._v(" "),_("h4",{attrs:{id:"读写操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#读写操作"}},[t._v("#")]),t._v(" 读写操作")]),t._v(" "),_("ul",[_("li",[t._v("读\n"),_("ul",[_("li",[t._v("查\n"),_("ul",[_("li",[t._v("节点是没有下标的, 只能从链表的表头开始查找某个节点")])])])])]),t._v(" "),_("li",[t._v("写\n"),_("ul",[_("li",[t._v("增\n"),_("ul",[_("li",[t._v("申请一小块内存--结点")]),t._v(" "),_("li",[t._v("插入到链中\n"),_("ul",[_("li",[t._v("从头部插入")]),t._v(" "),_("li",[t._v("从尾部插入")]),t._v(" "),_("li",[t._v("从中间插入")])])])])]),t._v(" "),_("li",[t._v("删\n"),_("ul",[_("li",[t._v("从链中剥离结点")]),t._v(" "),_("li",[t._v("释放这个结点的内存")])])]),t._v(" "),_("li",[t._v("改\n"),_("ul",[_("li",[t._v("改变这个结点中所存储的值")])])])])])]),t._v(" "),_("h4",{attrs:{id:"适用范围-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#适用范围-2"}},[t._v("#")]),t._v(" 适用范围")]),t._v(" "),_("ul",[_("li",[t._v("插入/删除操作远多于查询操作的场景")]),t._v(" "),_("li",[t._v("复杂抽象数据结构的基石")])]),t._v(" "),_("h2",{attrs:{id:"抽象结构-adt"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#抽象结构-adt"}},[t._v("#")]),t._v(" 抽象结构(ADT)")]),t._v(" "),_("h3",{attrs:{id:"栈-stack"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#栈-stack"}},[t._v("#")]),t._v(" 栈(Stack)")]),t._v(" "),_("p",[t._v("栈（Stack）是限制仅在表的一端进行插入和删除运算的线性表。")]),t._v(" "),_("p",[_("strong",[t._v("栈的修改原则：")])]),t._v(" "),_("p",[t._v('栈的修改是按后进先出的原则进行。每次删除（退栈）的总是当前栈中"最新"的元素，即最后插入（进栈）的元素，而最先插入的是被放在栈的底部，要到最后才能删除。')]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227032032.png",alt:"image-20201227032032142"}})]),t._v(" "),_("p",[t._v("超市货架上的商品")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227032051.png",alt:"image-20201227032051894"}})]),t._v(" "),_("p",[t._v("一叠书")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227025827.png",alt:"image-20201227025827009"}})]),t._v(" "),_("h4",{attrs:{id:"概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),_("ul",[_("li",[t._v("栈顶：插入、删除的这一端为栈顶")]),t._v(" "),_("li",[t._v("栈底：相对于栈顶的另一端")]),t._v(" "),_("li",[t._v("空栈：当表中没有元素时称为空栈")])]),t._v(" "),_("h4",{attrs:{id:"特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),_("ul",[_("li",[t._v("继承于java.util.Vector")]),t._v(" "),_("li",[t._v("后进先出")])]),t._v(" "),_("h4",{attrs:{id:"实现结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实现结构"}},[t._v("#")]),t._v(" 实现结构")]),t._v(" "),_("blockquote",[_("p",[t._v("顺序表实现栈")])]),t._v(" "),_("ul",[_("li",[t._v("用数组实现")]),t._v(" "),_("li",[t._v("优点：算法简单")]),t._v(" "),_("li",[t._v("缺点：数组大小只能事先规划声明好，太大了浪费空间，太小了不够用")])]),t._v(" "),_("blockquote",[_("p",[t._v("链表实现栈")])]),t._v(" "),_("ul",[_("li",[t._v("优点：随时可动态改变链表长度，有效利用内存空间")]),t._v(" "),_("li",[t._v("缺点：算法设计复杂")])]),t._v(" "),_("h4",{attrs:{id:"基本运算"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本运算"}},[t._v("#")]),t._v(" 基本运算")]),t._v(" "),_("ul",[_("li",[t._v("进栈(压栈、入栈): push(ele)")]),t._v(" "),_("li",[t._v("出栈: pop()")]),t._v(" "),_("li",[t._v("查看栈顶元素: peek()")]),t._v(" "),_("li",[t._v("清栈: clear()")]),t._v(" "),_("li",[t._v("大小: size()")]),t._v(" "),_("li",[t._v("判断是否是空:empty()")]),t._v(" "),_("li",[t._v("查找元素出现位置：search(Object  obj)")])]),t._v(" "),_("h4",{attrs:{id:"使用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),_("ul",[_("li",[t._v("二叉树和森林的遍历")]),t._v(" "),_("li",[t._v("CPU的中断处理")]),t._v(" "),_("li",[t._v("图形的深度优先查找法(DFS)")]),t._v(" "),_("li",[t._v("递归调用\n"),_("ul",[_("li",[t._v("斐波那契数列")]),t._v(" "),_("li",[t._v("汉诺塔问题")])])]),t._v(" "),_("li",[t._v("子程序的调用")])]),t._v(" "),_("h3",{attrs:{id:"队列-queue"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#队列-queue"}},[t._v("#")]),t._v(" 队列(Queue)")]),t._v(" "),_("p",[t._v("队列（Queue）是只允许在一端进行插入，而在另一端进行删除的运算受限的线性表。")]),t._v(" "),_("p",[_("strong",[t._v("队列的修改原则：")])]),t._v(" "),_("p",[t._v('队列的修改是依先进先出的原则进行的。新来的成员总是加入队尾（即不允许"加塞"），每次离开的成员总是队列头上的（不允许中途离队），即当前"最老的"成员离队。')]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227032124.png",alt:"image-20201227032124850"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227030151.png",alt:"image-20201227030151462"}})]),t._v(" "),_("h4",{attrs:{id:"概念-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概念-2"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),_("ul",[_("li",[t._v("队头(front)：允许删除的一端称为队头（Front）")]),t._v(" "),_("li",[t._v("队尾(rear)：允许添加的一端称为队尾（Rear）")]),t._v(" "),_("li",[t._v("空队列：当队列中没有元素时称为空队列")])]),t._v(" "),_("h4",{attrs:{id:"特点-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点-2"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),_("ul",[_("li",[t._v("先进先出")]),t._v(" "),_("li",[t._v("典型实现：PriorityQueue")])]),t._v(" "),_("h4",{attrs:{id:"实现结构-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实现结构-2"}},[t._v("#")]),t._v(" 实现结构")]),t._v(" "),_("blockquote",[_("p",[t._v("顺序表实现队列")])]),t._v(" "),_("ul",[_("li",[t._v("用数组实现")]),t._v(" "),_("li",[t._v("优点：算法简单")]),t._v(" "),_("li",[t._v("缺点：数组大小固定，无法根据队列实际需要动态申请")])]),t._v(" "),_("blockquote",[_("p",[t._v("链表实现队列")])]),t._v(" "),_("ul",[_("li",[t._v("优点：随时可动态改变链表长度，有效利用内存空间")]),t._v(" "),_("li",[t._v("缺点：算法设计复杂")])]),t._v(" "),_("h4",{attrs:{id:"操作-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作-2"}},[t._v("#")]),t._v(" 操作")]),t._v(" "),_("ul",[_("li",[t._v("加入元素到队列尾部: add(Object obj)/offer(Object obj)")]),t._v(" "),_("li",[t._v("获取队列头部元素，不删除该元素:element()/peek()")]),t._v(" "),_("li",[t._v("获取队列头部元素，并删除该元素：remove()/poll()")]),t._v(" "),_("li",[t._v("清理队列: clear()")]),t._v(" "),_("li",[t._v("得到队列的大小: size()")]),t._v(" "),_("li",[t._v("判断队列是否是空的: isEmpty()")])]),t._v(" "),_("h4",{attrs:{id:"使用场景-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-2"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),_("ul",[_("li",[t._v("图形的广度优先查找法（BFS)")]),t._v(" "),_("li",[t._v("可用于计算机各种事件处理的模拟\n"),_("ul",[_("li",[t._v("如: 事件队列, 消息队列")])])]),t._v(" "),_("li",[t._v("CPU的作业调度")])]),t._v(" "),_("h4",{attrs:{id:"变形的队列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#变形的队列"}},[t._v("#")]),t._v(" 变形的队列")]),t._v(" "),_("ul",[_("li",[t._v("环形队列")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227030457.png",alt:"image-20201227030457363"}})]),t._v(" "),_("ul",[_("li",[t._v("双向队列")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227030505.png",alt:"image-20201227030505106"}})]),t._v(" "),_("ul",[_("li",[t._v("优先队列")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227030513.png",alt:"image-20201227030513135"}})]),t._v(" "),_("h3",{attrs:{id:"树-tree"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#树-tree"}},[t._v("#")]),t._v(" 树(Tree)")]),t._v(" "),_("p",[t._v("树：")]),t._v(" "),_("p",[t._v("对大量的输入数据，链表的线性访问时间太慢，不宜使用。这里是另外一种重要的数据结构----树，其大部分时间可以保证操作的运行平均时间复杂度为O(logN)。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227032206.png",alt:"image-20201227032206074"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227032219.png",alt:"image-20201227032219057"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227032242.png",alt:"image-20201227032242498"}})]),t._v(" "),_("p",[t._v("公司组织架构")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227032308.png",alt:"image-20201227032308617"}})]),t._v(" "),_("p",[t._v("家族族谱")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227032324.png",alt:"image-20201227032324161"}})]),t._v(" "),_("p",[t._v("Linux系统的文件和目录结构")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227030542.png",alt:"image-20201227030542445"}})]),t._v(" "),_("p",[t._v("计算机世界的树")]),t._v(" "),_("h4",{attrs:{id:"专有名词"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#专有名词"}},[t._v("#")]),t._v(" 专有名词")]),t._v(" "),_("ul",[_("li",[t._v("结点：树中的数据元素都称之为结点")]),t._v(" "),_("li",[t._v("根节点：最上面的结点称之为根，一颗树只有一个根且由根发展而来，从另外一个角度来说，每个结点都可以认为是其子树的根")]),t._v(" "),_("li",[t._v("父节点：结点的上层结点，如图中，结点K的父节点是E、结点L的父节点是G")]),t._v(" "),_("li",[t._v("子节点：节点的下层结点，如图中，节点E的子节点是K节点、节点G的子节点是L节点")]),t._v(" "),_("li",[t._v("兄弟节点：具有相同父节点的结点称为兄弟节点，图中F、G、H互为兄弟节点")]),t._v(" "),_("li",[t._v("结点的度数：每个结点所拥有的子树的个数称之为结点的度，如结点B的度为3")]),t._v(" "),_("li",[t._v("树叶：度数为0的结点，也叫作终端结点，图中D、K、F、L、H、I、J都是树叶")]),t._v(" "),_("li",[t._v("非终端节点（或分支节点）：树叶以外的节点，或度数不为0的节点。图中根、A、B、C、E、G都是")]),t._v(" "),_("li",[t._v("树的深度（或高度）：树中结点的最大层次数，图中树的深度为4")]),t._v(" "),_("li",[t._v("结点的层数：从根节点到树中某结点所经路径上的分支树称为该结点的层数，根节点的层数规定为1，其余结点的层数等于其父亲结点的层数+1")]),t._v(" "),_("li",[t._v("同代：在同一棵树中具有相同层数的节点")])]),t._v(" "),_("h4",{attrs:{id:"二叉树-binary-tree"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉树-binary-tree"}},[t._v("#")]),t._v(" 二叉树(Binary Tree)")]),t._v(" "),_("p",[t._v("二叉树：")]),t._v(" "),_("p",[t._v("在普通树的基础上，让一棵树中每个节点最多只能包含两个子节点，且严格区分左子节点和右子节点（位置不能换）。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227030708.png",alt:"image-20201227030708300"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227030712.png",alt:"image-20201227030712120"}})]),t._v(" "),_("blockquote",[_("p",[t._v("分类")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227030739.png",alt:"image-20201227030739306"}})]),t._v(" "),_("blockquote",[_("p",[t._v("功能")])]),t._v(" "),_("ul",[_("li",[t._v("增删改查")]),t._v(" "),_("li",[t._v("搜索\n"),_("ul",[_("li",[t._v("广度优先搜索")]),t._v(" "),_("li",[t._v("深度优先搜索\n"),_("ul",[_("li",[t._v("前序遍历：树根->左子树->右子树")]),t._v(" "),_("li",[t._v("中序遍历：左子树->树根->右子树")]),t._v(" "),_("li",[t._v("后序遍历：左子树->右子树->树根")])])])])])]),t._v(" "),_("blockquote",[_("p",[t._v("特例")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("排序二叉树")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("满足一些条件的二叉树，才被称为排序二叉树。比如：若它的左子树不为空，左子树上的所有节点")]),t._v(" "),_("p",[t._v("值均小于根节点值；若右子树不为空，右子树上的所有节点值均大于根节点值。")])]),t._v(" "),_("li",[_("p",[t._v("特点：可以非常方便地对树中的所有节点进行排序和检索。")])])])]),t._v(" "),_("li",[_("p",[t._v("红黑树")]),t._v(" "),_("ul",[_("li",[t._v("红黑树顾名思义就是结点是红色或者黑色的平衡二叉树，它通过颜色的约束来维持着二叉树的平衡。下图为一颗典型的二叉。")]),t._v(" "),_("li",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227030949.png",alt:"image-20201227030949246"}})])])])]),t._v(" "),_("p",[t._v("对于一棵有效的红黑树而言我们必须增加如下规则：")]),t._v(" "),_("ul",[_("li",[t._v("1、每个结点都只能是红色或者黑色")]),t._v(" "),_("li",[t._v("2、根节点是黑色")]),t._v(" "),_("li",[t._v("3、每片叶子都是黑色的")]),t._v(" "),_("li",[t._v("4、如果一个结点是红色的，则它的两个子节点都是黑色的，也就是说在一条路径上不能出现相邻的两个红色结点")]),t._v(" "),_("li",[t._v("5、从任意一个结点到其每个叶子的所有路径都包含着相同数目的黑色结点")])]),t._v(" "),_("p",[t._v("这些约束强制了红黑树的关键性质：从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。结果就是这棵树大致上是平衡的，因为插入、删除和查找某个值得最坏情况时间都要求与树的高度成比例，这个高度理论上限允许红黑树只在最坏情况下都是高效的。")]),t._v(" "),_("p",[t._v("再具体就不说了，可以参看http://www.cnblogs.com/yangecnu/p/Introduce-Red-Black-Tree.html，对红黑树的讲解写得非常好。")]),t._v(" "),_("p",[t._v("TreeMap和TreeSet就是红黑树的典型实现。")]),t._v(" "),_("blockquote",[_("p",[t._v("使用场景")])]),t._v(" "),_("ul",[_("li",[t._v("哈夫曼树\n"),_("ul",[_("li",[t._v("一种带权路径最短的二叉树，在信息检索中很常用")])])]),t._v(" "),_("li",[t._v("哈夫曼编码\n"),_("ul",[_("li",[t._v("假设需要对一个字符串如“abcdabcaba”进行编码，将它转换为唯一的二进制码，同时要求转换出来的二进制码的长度最小。我们采用哈夫曼树来解决报文编码问题。")]),t._v(" "),_("li",[t._v("**1. 哈夫曼编码：**在数据通信中，需要将传送的文字转换成二进制的字符串，现要求为这些字母设计编码。在实际应用中，各个字符的出现频度或使用次数是不相同的，如A、B、C的使用频率远远高于X、Y、Z，自然会想到设计编码时，让使用频率高的用短码，使用频率低的用长码，以优化整个报文编码。为了获得传送报文的最短长度，可将每个字符的出现频率作为字符结点的权值赋予该结点上，显然字使用频率越小权值越小，权值越小叶子就越靠下，于是频率小编码长，频率高编码短，这样就保证了此树的最小带权路径长度效果上就是传送报文的最短长度。利用哈夫曼树来设计二进制的前缀编码，既满足前缀编码的条件，又保证报文编码总长最短。")]),t._v(" "),_("li",[t._v("**2. 哈夫曼译码：**在通信中，若将字符用哈夫曼编码形式发送出去，对方接收到编码后，将编码还原成字符的过程，称为哈夫曼译码。")])])]),t._v(" "),_("li",[t._v("B+树")])]),t._v(" "),_("h3",{attrs:{id:"图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图"}},[t._v("#")]),t._v(" 图")]),t._v(" "),_("h4",{attrs:{id:"定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),_("p",[t._v("由“顶点”和“边”所组成的集合")]),t._v(" "),_("h4",{attrs:{id:"分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),_("ul",[_("li",[t._v("无向图")]),t._v(" "),_("li",[t._v("有向图")])]),t._v(" "),_("h4",{attrs:{id:"图的表示法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图的表示法"}},[t._v("#")]),t._v(" 图的表示法")]),t._v(" "),_("ul",[_("li",[t._v("邻接矩阵法")]),t._v(" "),_("li",[t._v("邻接表法")]),t._v(" "),_("li",[t._v("邻接复合链表法")]),t._v(" "),_("li",[t._v("索引表格法")])]),t._v(" "),_("h4",{attrs:{id:"图的遍历"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图的遍历"}},[t._v("#")]),t._v(" 图的遍历")]),t._v(" "),_("ul",[_("li",[t._v("深度优先遍历")]),t._v(" "),_("li",[t._v("广度优先遍历")])]),t._v(" "),_("h4",{attrs:{id:"应用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),_("ul",[_("li",[t._v("最短路径搜索")]),t._v(" "),_("li",[t._v("拓扑排序")])]),t._v(" "),_("h3",{attrs:{id:"其它"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[t._v("#")]),t._v(" 其它")]),t._v(" "),_("p",[t._v("散列表(Hash),堆(Heap)")]),t._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227031758.png",alt:"image-20201227031758202"}})]),t._v(" "),_("h2",{attrs:{id:"参考书籍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考书籍"}},[t._v("#")]),t._v(" 参考书籍")]),t._v(" "),_("p",[t._v("数据结构与算法分析Java语言描述（第2版）[美] 卡拉罗（Carrano,F.M.） 著 金名，等 译")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227024806.png",alt:"image-20201227024806896"}})]),t._v(" "),_("p",[t._v("大话数据结构 （作 者：程杰 著）")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201227024828.png",alt:"image-20201227024828097"}})])])}),[],!1,null,null,null);v.default=i.exports}}]);