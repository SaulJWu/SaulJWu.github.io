(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{583:function(v,_,e){"use strict";e.r(_);var a=e(15),t=Object(a.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[v._v("#")]),v._v(" 前言")]),v._v(" "),e("p",[e("code",[v._v("Java")]),v._v(" 集合可分为"),e("code",[v._v("Collection")]),v._v(" 和"),e("code",[v._v("Map")]),v._v(" 两种体系:")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("Collection")]),v._v("接口：单列数据，定义了存取一组对象的方法的集合\n"),e("ul",[e("li",[e("code",[v._v("List")]),v._v("：元素有序、可重复的集合\n"),e("ul",[e("li",[e("code",[v._v("ArrayList")]),v._v("、"),e("code",[v._v("LinkedList")]),v._v("、"),e("code",[v._v("Vector")])])])]),v._v(" "),e("li",[e("code",[v._v("Set")]),v._v("：元素无序、不可重复的集合\n"),e("ul",[e("li",[e("code",[v._v("HashSet")]),v._v("、"),e("code",[v._v("LinkedHashSet")]),v._v("、"),e("code",[v._v("TreeSet")])])])])])]),v._v(" "),e("li",[e("code",[v._v("Map")]),v._v("接口：双列数据，保存具有映射关系“"),e("code",[v._v("key-value对")]),v._v("”的集合，也称为"),e("strong",[v._v("键值对")]),v._v("。\n"),e("ul",[e("li",[e("code",[v._v("HashMap")]),v._v("、"),e("code",[v._v("LinkedHashMap")]),v._v("、"),e("code",[v._v("TreeMap")]),v._v("、"),e("code",[v._v("Hashtable")]),v._v("、"),e("code",[v._v("Properties")])])])])]),v._v(" "),e("p",[e("strong",[v._v("现在我们开始学习Map的实现类之一："),e("code",[v._v("HashMap")]),v._v("。")])]),v._v(" "),e("h2",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[v._v("#")]),v._v(" 概述")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("HashMap是Map 接口使用频率最高的实现类。")])]),v._v(" "),e("li",[v._v("允许使用null键和null值，与HashSet一样，不保证映射的顺序。")]),v._v(" "),e("li",[v._v("所有的key构成的集合是Set:**无序的、不可重复的。**所以，key所在的类要重写："),e("code",[v._v("equals()")]),v._v("和"),e("code",[v._v("hashCode()")])]),v._v(" "),e("li",[v._v("所有的value构成的集合是"),e("code",[v._v("Collection")]),v._v(":无序的、可以重复的。所以，value所在的类要重写："),e("code",[v._v("equals()")])]),v._v(" "),e("li",[v._v("一个key-value构成一个entry")]),v._v(" "),e("li",[v._v("所有的entry构成的集合是Set:无序的、不可重复的")]),v._v(" "),e("li",[v._v("HashMap 判断两个key 相等的标准是：两个key 通过"),e("code",[v._v("equals()")]),v._v(" 方法返回true，"),e("code",[v._v("hashCode")]),v._v("值也相等。")]),v._v(" "),e("li",[v._v("HashMap判断两个value相等的标准是：两个value 通过"),e("code",[v._v("equals()")]),v._v(" 方法返回true。")])]),v._v(" "),e("h2",{attrs:{id:"存储结构图示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#存储结构图示"}},[v._v("#")]),v._v(" 存储结构图示")]),v._v(" "),e("ul",[e("li",[v._v("JDK7")])]),v._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201226225335.png",alt:"image-20201226225334866"}})]),v._v(" "),e("ul",[e("li",[v._v("JDK8")])]),v._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/SaulJWu/images/main/20201226225415.png",alt:"image-20201226225415061"}})]),v._v(" "),e("h2",{attrs:{id:"源码中的重要常量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源码中的重要常量"}},[v._v("#")]),v._v(" 源码中的重要常量")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("DEFAULT_INITIAL_CAPACITY")]),v._v(" : "),e("code",[v._v("HashMap")]),v._v("的默认容量，"),e("code",[v._v("16")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("MAXIMUM_CAPACITY")]),v._v(" ："),e("code",[v._v("HashMap")]),v._v("的最大支持容量，"),e("code",[v._v("2^30")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("DEFAULT_LOAD_FACTOR")]),v._v("："),e("code",[v._v("HashMap")]),v._v("的默认加载因子，"),e("code",[v._v("0.75")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("TREEIFY_THRESHOLD")]),v._v("："),e("code",[v._v("Bucket")]),v._v("中链表长度大于该默认值"),e("code",[v._v("8")]),v._v("，转化为红黑树。")]),v._v(" "),e("li",[e("code",[v._v("UNTREEIFY_THRESHOLD")]),v._v("："),e("code",[v._v("Bucket")]),v._v("中红黑树存储的"),e("code",[v._v("Node")]),v._v("小于该默认值，转化为链表。")]),v._v(" "),e("li",[e("code",[v._v("MIN_TREEIFY_CAPACITY")]),v._v("：桶中的"),e("code",[v._v("Node")]),v._v("被树化时最小的"),e("code",[v._v("hash")]),v._v("表容量，默认是64。（当桶中"),e("code",[v._v("Node")]),v._v("的数量大到需要变红黑树时，若"),e("code",[v._v("hash")]),v._v("表容量小于"),e("code",[v._v("MIN_TREEIFY_CAPACITY")]),v._v("时，此时应执行"),e("code",[v._v("resize")]),v._v("扩容操作这个"),e("code",[v._v("MIN_TREEIFY_CAPACITY")]),v._v("的值至少是"),e("code",[v._v("TREEIFY_THRESHOLD")]),v._v("的4倍。）")]),v._v(" "),e("li",[e("code",[v._v("table")]),v._v("：存储元素的数组，总是2的n次幂")]),v._v(" "),e("li",[e("code",[v._v("entrySet")]),v._v("：存储具体元素的集")]),v._v(" "),e("li",[e("code",[v._v("size")]),v._v("：HashMap中存储的键值对的数量")]),v._v(" "),e("li",[e("code",[v._v("modCount")]),v._v("：HashMap扩容和结构改变的次数。")]),v._v(" "),e("li",[e("code",[v._v("threshold")]),v._v("：扩容的临界值，等于容量*填充因子，"),e("code",[v._v("16*0.75=12")])]),v._v(" "),e("li",[e("code",[v._v("loadFactor")]),v._v("：填充因子，0.75")])]),v._v(" "),e("h2",{attrs:{id:"jdk7底层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jdk7底层"}},[v._v("#")]),v._v(" JDK7底层")]),v._v(" "),e("h3",{attrs:{id:"存储结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#存储结构"}},[v._v("#")]),v._v(" 存储结构")]),v._v(" "),e("blockquote",[e("p",[v._v("HashMap的存储结构：JDK 1.8之前")])]),v._v(" "),e("ul",[e("li",[v._v("HashMap的内部存储结构其实是"),e("strong",[v._v("数组和链表")]),v._v("的结合。")]),v._v(" "),e("li",[v._v("当实例化一个"),e("code",[v._v("HashMap")]),v._v("时，系统会创建一个长度为"),e("code",[v._v("Capacity")]),v._v("的"),e("code",[v._v("Entry")]),v._v("数组，\n"),e("ul",[e("li",[v._v("这个长度在哈希表中被称为"),e("strong",[v._v("容量("),e("code",[v._v("Capacity")]),v._v(")")]),v._v("，")]),v._v(" "),e("li",[v._v("在这个数组中可以存放元素的位置我们称之为“桶”("),e("code",[v._v("bucket")]),v._v(")，")]),v._v(" "),e("li",[v._v("每个"),e("code",[v._v("bucket")]),v._v("都有自己的索引，")]),v._v(" "),e("li",[v._v("系统可以根据索引快速的查找"),e("code",[v._v("bucket")]),v._v("中的元素。")])])]),v._v(" "),e("li",[v._v("每个"),e("code",[v._v("bucket")]),v._v("中存储一个元素，即一个"),e("code",[v._v("Entry")]),v._v("对象，\n"),e("ul",[e("li",[v._v("但每一个"),e("code",[v._v("Entry")]),v._v("对象可以带一个引用变量，用于指向下一个元素，")]),v._v(" "),e("li",[v._v("因此，在一个桶中，就有可能生成一个"),e("code",[v._v("Entry")]),v._v("链。而且新添加的元素作为链表的"),e("code",[v._v("head")]),v._v("。")])])])]),v._v(" "),e("h3",{attrs:{id:"添加元素的过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加元素的过程"}},[v._v("#")]),v._v(" 添加元素的过程")]),v._v(" "),e("blockquote",[e("p",[e("strong",[v._v("添加元素的过程：")])])]),v._v(" "),e("ul",[e("li",[v._v("向"),e("code",[v._v("HashMap")]),v._v("中添加"),e("code",[v._v("entry1(key，value)")]),v._v("，需要首先计算"),e("code",[v._v("entry1")]),v._v("中"),e("code",[v._v("key的哈希值")]),v._v("(根据"),e("code",[v._v("key")]),v._v("所在类的"),e("code",[v._v("hashCode()")]),v._v("计算得到)，此哈希值经过处理以后，得到在底层"),e("code",[v._v("Entry[]")]),v._v("数组中要存储的位置"),e("code",[v._v("i")]),v._v("。")]),v._v(" "),e("li",[v._v("如果位置"),e("code",[v._v("i")]),v._v("上没有元素，则"),e("code",[v._v("entry1")]),v._v("直接添加成功。")]),v._v(" "),e("li",[v._v("如果位置"),e("code",[v._v("i")]),v._v("上已经存在"),e("code",[v._v("entry2")]),v._v("(或还有链表存在的"),e("code",[v._v("entry3")]),v._v("，"),e("code",[v._v("entry4")]),v._v(")，则需要通过循环的方法，依次比较"),e("code",[v._v("entry1")]),v._v("中"),e("code",[v._v("key")]),v._v("和其他的"),e("code",[v._v("entry")]),v._v("。\n"),e("ul",[e("li",[v._v("如果彼此"),e("code",[v._v("hash")]),v._v("值不同，则直接添加成功。")]),v._v(" "),e("li",[v._v("如果"),e("code",[v._v("hash")]),v._v("值不同，继续比较二者是否"),e("code",[v._v("equals")]),v._v("。\n"),e("ul",[e("li",[v._v("如果返回值为"),e("code",[v._v("true")]),v._v("，则使用"),e("code",[v._v("entry1")]),v._v("的"),e("code",[v._v("value")]),v._v("去替换"),e("code",[v._v("equals")]),v._v("为"),e("code",[v._v("true")]),v._v("的"),e("code",[v._v("entry")]),v._v("的"),e("code",[v._v("value")]),v._v("。")]),v._v(" "),e("li",[v._v("如果遍历一遍以后，"),e("strong",[v._v("发现所有的"),e("code",[v._v("equals")]),v._v("返回都为"),e("code",[v._v("false")])]),v._v(",则"),e("code",[v._v("entry1")]),v._v("仍可添加成功。"),e("code",[v._v("entry1")]),v._v("指向原有的"),e("code",[v._v("entry")]),v._v("元素。")])])])])])]),v._v(" "),e("h3",{attrs:{id:"扩容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩容"}},[v._v("#")]),v._v(" 扩容")]),v._v(" "),e("blockquote",[e("p",[v._v("HashMap的扩容")])]),v._v(" "),e("p",[v._v("当"),e("code",[v._v("HashMap")]),v._v("中的元素越来越多的时候，"),e("code",[v._v("hash")]),v._v("冲突的几率也就越来越高，因为数组的长度是固定的。")]),v._v(" "),e("p",[v._v("所以为了提高查询的效率，就要对"),e("code",[v._v("HashMap")]),v._v("的数组进行扩容，而在"),e("code",[v._v("HashMap")]),v._v("数组扩容之后，最消耗性能的点就出现了："),e("strong",[v._v("原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是"),e("code",[v._v("resize")]),v._v("。")])]),v._v(" "),e("blockquote",[e("p",[v._v("那么HashMap什么时候进行扩容呢？")])]),v._v(" "),e("ul",[e("li",[v._v("当"),e("code",[v._v("HashMap")]),v._v("中的元素个数超过数组大小*"),e("code",[v._v("loadFactor")]),v._v("时，就 会 进 行 数 组 扩 容。*\n"),e("ul",[e("li",[v._v("数组大小指的是数组总大小"),e("code",[v._v("length")]),v._v(",不是数组中个数"),e("code",[v._v("size")])]),v._v(" "),e("li",[e("code",[v._v("loadFactor")]),v._v("的默认值("),e("code",[v._v("DEFAULT_LOAD_FACTOR")]),v._v(")为"),e("code",[v._v("0.75")]),v._v("，这是一个折中的取值。")]),v._v(" "),e("li",[v._v("也就是说，默认情况下，数组大小("),e("code",[v._v("DEFAULT_INITIAL_CAPACITY")]),v._v(")为"),e("code",[v._v("16")]),v._v("，")]),v._v(" "),e("li",[v._v("那么当"),e("code",[v._v("HashMap")]),v._v("中元素个数超过"),e("code",[v._v("16*0.75=12")]),v._v("的时候，\n"),e("ul",[e("li",[v._v("（这个值就是代码中的"),e("code",[v._v("threshold")]),v._v("值，也叫做"),e("code",[v._v("临界值")]),v._v("）")])])]),v._v(" "),e("li",[v._v("就把数组的大小扩展为"),e("code",[v._v("2*16=32")]),v._v("，即扩大一倍，")]),v._v(" "),e("li",[v._v("然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，")]),v._v(" "),e("li",[e("strong",[v._v("所以如果我们已经预知"),e("code",[v._v("HashMap")]),v._v("中元素的个数，那么预设元素的个数能够有效的提高"),e("code",[v._v("HashMap")]),v._v("的性能。")])])])])]),v._v(" "),e("h2",{attrs:{id:"jdk8底层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jdk8底层"}},[v._v("#")]),v._v(" JDK8底层")]),v._v(" "),e("h3",{attrs:{id:"存储结构-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#存储结构-2"}},[v._v("#")]),v._v(" 存储结构")]),v._v(" "),e("blockquote",[e("p",[v._v("HashMap的存储结构：JDK 1.8之后")])]),v._v(" "),e("ul",[e("li",[e("p",[e("code",[v._v("HashMap")]),v._v("的内部存储结构其实是"),e("strong",[v._v("数组+链表+树")]),v._v("的结合。")]),v._v(" "),e("ul",[e("li",[v._v("当实例化一个"),e("code",[v._v("HashMap")]),v._v("时，会初始化"),e("code",[v._v("initialCapacity")]),v._v("和"),e("code",[v._v("loadFactor")]),v._v("，")]),v._v(" "),e("li",[v._v("在put第一对映射关系时，系统会创建一个长度为"),e("code",[v._v("initialCapacity")]),v._v("的"),e("code",[v._v("Node")]),v._v("数组，")]),v._v(" "),e("li",[v._v("这个长度在哈希表中被称为容量("),e("code",[v._v("Capacity")]),v._v(")，")]),v._v(" "),e("li",[v._v("在这个数组中可以存放元素的位置我们称之为“桶”("),e("code",[v._v("bucket")]),v._v(")，")]),v._v(" "),e("li",[v._v("每个"),e("code",[v._v("bucket")]),v._v("都有自己的索引，系统可以根据索引快速的查找"),e("code",[v._v("bucket")]),v._v("中的元素。")])])]),v._v(" "),e("li",[e("p",[v._v("每个"),e("code",[v._v("bucket")]),v._v("中存储一个元素，即一个"),e("code",[v._v("Node")]),v._v("对象，")]),v._v(" "),e("ul",[e("li",[v._v("但每一个Node对象可以带一个引用变量"),e("code",[v._v("next")]),v._v("，用于指向下一个元素，因此，在一个桶中，就有可能生成一个"),e("code",[v._v("Node")]),v._v("链。也可能是一个一个"),e("code",[v._v("TreeNode")]),v._v("对象，\n"),e("ul",[e("li",[v._v("每一个"),e("code",[v._v("TreeNode")]),v._v("对象可以有两个叶子结点"),e("code",[v._v("left")]),v._v("和"),e("code",[v._v("right")]),v._v("，")])])]),v._v(" "),e("li",[v._v("因此，在一个桶中，就有可能生成一个"),e("code",[v._v("TreeNode")]),v._v("树。\n"),e("ul",[e("li",[v._v("而新添加的元素作为链表的"),e("code",[v._v("last")]),v._v("，或树的叶子结点。")])])])])])]),v._v(" "),e("h3",{attrs:{id:"扩容和结构变化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩容和结构变化"}},[v._v("#")]),v._v(" 扩容和结构变化")]),v._v(" "),e("blockquote",[e("p",[v._v("那么HashMap什么时候进行扩容和树形化呢？")])]),v._v(" "),e("ul",[e("li",[v._v("当"),e("code",[v._v("HashMap")]),v._v("中的元素个数超过数组大小"),e("code",[v._v("loadFactor")]),v._v("时，就会进行数组扩容。\n"),e("ul",[e("li",[v._v("数组大小指的是数组总大小"),e("code",[v._v("length")]),v._v(",不是数组中个数"),e("code",[v._v("size")])]),v._v(" "),e("li",[e("em",[e("code",[v._v("loadFactor")]),v._v("的默认值("),e("code",[v._v("DEFAULT_LOAD_FACTOR")]),v._v(")为"),e("code",[v._v("0.75")]),v._v("，这是一个折中的取值。")])]),v._v(" "),e("li",[e("em",[v._v("也就是说，默认情况下，数组大小("),e("code",[v._v("DEFAULT_INITIAL_CAPACITY")]),v._v(")为"),e("code",[v._v("16")]),v._v("，")])]),v._v(" "),e("li",[v._v("那么当"),e("code",[v._v("HashMap")]),v._v("中元素个数超过"),e("code",[v._v("16*0.75=12")]),v._v("的时候，\n"),e("ul",[e("li",[v._v("这个值就是代码中的"),e("code",[v._v("threshold")]),v._v("值，也叫做"),e("strong",[v._v("临界值")])])])]),v._v(" "),e("li",[v._v("就把数组的大小扩展为"),e("code",[v._v("2*16=32")]),v._v("，即扩大一倍，")]),v._v(" "),e("li",[v._v("然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，")]),v._v(" "),e("li",[v._v("所以如果我们已经预知"),e("code",[v._v("HashMap")]),v._v("中元素的个数，那么预设元素的个数能够有效的提高"),e("code",[v._v("HashMap")]),v._v("的性能。")])])])]),v._v(" "),e("p",[e("strong",[v._v("当"),e("code",[v._v("HashMap")]),v._v("中的其中一个链的对象个数如果达到了8个，此时如果当前集合的长度"),e("code",[v._v("capacity")]),v._v("没有达到64，那么"),e("code",[v._v("HashMap")]),v._v("会先扩容解决，")])]),v._v(" "),e("p",[e("strong",[v._v("如果已经达到了64，那么这个链会变成树，结点类型由"),e("code",[v._v("Node")]),v._v("变成"),e("code",[v._v("TreeNode")]),v._v("类型。")])]),v._v(" "),e("p",[e("strong",[v._v("当然，如果当映射关系被移除后，下次"),e("code",[v._v("resize")]),v._v("方法时判断树的结点个数低于6个，也会把树再转为链表。")])]),v._v(" "),e("h3",{attrs:{id:"key的注意点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#key的注意点"}},[v._v("#")]),v._v(" key的注意点")]),v._v(" "),e("blockquote",[e("p",[v._v("关于映射关系的key是否可以修改？")])]),v._v(" "),e("p",[v._v("不要修改。")]),v._v(" "),e("p",[v._v("映射关系存储到"),e("code",[v._v("HashMap")]),v._v("中会存储"),e("code",[v._v("key")]),v._v("的"),e("code",[v._v("hash")]),v._v("值，这样就不用在每次查找时重新计算每一个"),e("code",[v._v("Entry")]),v._v("或"),e("code",[v._v("Node")]),v._v("（"),e("code",[v._v("TreeNode")]),v._v("）的"),e("code",[v._v("hash")]),v._v("值了，因此如果已经"),e("code",[v._v("put")]),v._v("到"),e("code",[v._v("Map")]),v._v("中的映射关系，再修改"),e("code",[v._v("key")]),v._v("的属性，而这个属性又参与"),e("code",[v._v("hashcode")]),v._v("值的计算，那么会导致匹配不上。")]),v._v(" "),e("p",[v._v("就像之前有个例子修改"),e("code",[v._v("HashSet")]),v._v("里面的对象的属性时，"),e("code",[v._v("remove()")]),v._v("就匹配不到，找不到了。")]),v._v(" "),e("h3",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[v._v("#")]),v._v(" 小结")]),v._v(" "),e("ul",[e("li",[v._v("1."),e("code",[v._v("HashMap map = new HashMap();")]),v._v("//默认情况下，先不创建长度为16的数组")]),v._v(" "),e("li",[v._v("2.当首次调用"),e("code",[v._v("map.put()")]),v._v("时，再创建长度为16的数组")]),v._v(" "),e("li",[v._v("3.数组为"),e("code",[v._v("Node")]),v._v("类型，在jdk7中称为"),e("code",[v._v("Entry")]),v._v("类型")]),v._v(" "),e("li",[v._v("4.形成链表结构时，新添加的"),e("code",[v._v("key-value")]),v._v("对在链表的尾部（七上八下）")]),v._v(" "),e("li",[v._v("5."),e("strong",[v._v("当数组指定索引位置的链表长度>8时，且map中的数组的长度> 64时，此索引位置上的所有"),e("code",[v._v("key-value对")]),v._v("使用红黑树进行存储。")])])]),v._v(" "),e("h2",{attrs:{id:"回头看看hashset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回头看看hashset"}},[v._v("#")]),v._v(" 回头看看HashSet")]),v._v(" "),e("p",[v._v("我们已经知道HashSet底层其实就是HashMap，添加元素时的源码：")]),v._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("public")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("boolean")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("E")]),v._v(" e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("return")]),v._v(" map"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("put")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" PRESENT"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("==")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])]),v._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[v._v("1")]),e("br"),e("span",{staticClass:"line-number"},[v._v("2")]),e("br"),e("span",{staticClass:"line-number"},[v._v("3")]),e("br")])]),e("p",[v._v("这个元素e，其实就HashMap中的key")]),v._v(" "),e("ul",[e("li",[v._v("PRESENT是HashSet内部定义的静态常量。")])]),v._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("private")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("static")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("final")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Object")]),v._v(" PRESENT "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])]),v._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[v._v("1")]),e("br")])]),e("p",[v._v("PRESENT其实只是空的对象，没有实际意义，只是为了防止控指针异常。")]),v._v(" "),e("h2",{attrs:{id:"面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[v._v("#")]),v._v(" 面试题")]),v._v(" "),e("blockquote",[e("p",[e("strong",[v._v("谈谈你对HashMap中put/get方法的认识？如果了解再谈谈HashMap的扩容机制？默认大小是多少？什么是负载因子(或填充比)？什么是吞吐临界值(或阈值、threshold)？")])])]),v._v(" "),e("blockquote",[e("p",[v._v("负载因子值的大小，对HashMap有什么影响")])]),v._v(" "),e("ul",[e("li",[v._v("负载因子的大小决定了HashMap的数据密度。")]),v._v(" "),e("li",[v._v("负载因子越大密度越大，发生碰撞的几率越高，数组中的链表越容易长,造成查询或插入时的比较次数增多，性能会下降。")]),v._v(" "),e("li",[v._v("负载因子越小，就越容易触发扩容，数据密度也越小，意味着发生碰撞的几率越小，数组中的链表也就越短，查询和插入时比较的次数也越小，性能会更高。但是会浪费一定的内容空间。而且经常扩容也会影响性能，建议初始化预设大一点的空间。")]),v._v(" "),e("li",[v._v("按照其他语言的参考及研究经验，会考虑将负载因子设置为0.7~0.75，此时平均检索长度接近于常数。")])]),v._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),e("p",[e("strong",[v._v("HashMap的底层原理？")])]),v._v(" "),e("p",[v._v("JDK7和JDK8的原理稍微有点不同")]),v._v(" "),e("blockquote",[e("p",[v._v("JDK7")])]),v._v(" "),e("ul",[e("li",[v._v("在实例化以后，底层创建了长度是16的一堆数组"),e("code",[v._v("Entry[] table")]),v._v("。")]),v._v(" "),e("li",[v._v("存放元素时是以"),e("code",[v._v("key-value对")]),v._v("存放，计算"),e("code",[v._v("key")]),v._v("的"),e("strong",[v._v("哈希值")]),v._v("，决定"),e("code",[v._v("Entry数组")]),v._v("中的存放位置。")]),v._v(" "),e("li",[v._v("如果此位置上的数据为空，添加成功。")]),v._v(" "),e("li",[v._v("如果此位置上的数据不为空，意味着此位置上存在一个或多个数据（以链表形式存在），比较存放元素的"),e("code",[v._v("key的哈希值")]),v._v("和已经存在的数据的"),e("code",[v._v("key的哈希值")]),v._v(" "),e("ul",[e("li",[v._v("如果"),e("code",[v._v("key的哈希值")]),v._v("都不相同，则以"),e("strong",[v._v("链表方式")]),v._v("添加成功。")]),v._v(" "),e("li",[v._v("如果跟某一个元素的"),e("code",[v._v("key的哈希值")]),v._v("相同，继续比较它们的"),e("code",[v._v("equals")]),v._v("方法。\n"),e("ul",[e("li",[e("code",[v._v("equals()")]),v._v("返回"),e("code",[v._v("false")]),v._v("，则以"),e("strong",[v._v("链表方式")]),v._v("添加成功。")]),v._v(" "),e("li",[e("code",[v._v("equals()")]),v._v("返回"),e("code",[v._v("true")]),v._v("，说明"),e("code",[v._v("key")]),v._v("是一样的，将存放元素的"),e("code",[v._v("value")]),v._v("去覆盖(替换)已经存在的元素的"),e("code",[v._v("value")]),v._v("。")])])])])])]),v._v(" "),e("p",[e("strong",[v._v("底层结构：数组+链表。")])]),v._v(" "),e("p",[v._v("扩容问题：")]),v._v(" "),e("p",[e("strong",[v._v("在添加过程中，会涉及到扩容问题，当当前元素的个数超出临界值和存放的位置不为空时，默认的库容为原来容量的2倍，并会将原有的数据复制过来。")])]),v._v(" "),e("blockquote",[e("p",[v._v("JDK8底层和JKD7差不多，但是有几个点要注意")])]),v._v(" "),e("ul",[e("li",[v._v("在实例化以后，底层创建的数组是"),e("code",[v._v("Node[]")])]),v._v(" "),e("li",[e("strong",[v._v("首次")]),v._v("调用"),e("code",[v._v("put")]),v._v("方法添加元素时，底层创建长度为16的数组。")]),v._v(" "),e("li",[v._v("存放元素也是以"),e("code",[v._v("key-value")]),v._v("对存放\n"),e("ul",[e("li",[e("strong",[v._v("当数组的某一个索引位置上的元素以链表的形式存在的数据个数大于8")])]),v._v(" "),e("li",[e("strong",[v._v("并且当前链表数组的长度大于64时，")])]),v._v(" "),e("li",[e("strong",[v._v("此时此索引位置上的数据结构从链表转换为红黑树。")])])])])]),v._v(" "),e("p",[e("strong",[v._v("底层结构：数组+链表+红黑树。")])])])}),[],!1,null,null,null);_.default=t.exports}}]);