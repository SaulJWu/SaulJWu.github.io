(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{573:function(v,_,e){"use strict";e.r(_);var o=e(15),t=Object(o.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[v._v("#")]),v._v(" 前言")]),v._v(" "),e("p",[e("code",[v._v("Java")]),v._v(" 集合可分为"),e("code",[v._v("Collection")]),v._v(" 和"),e("code",[v._v("Map")]),v._v(" 两种体系:")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("Collection")]),v._v("接口：单列数据，定义了存取一组对象的方法的集合\n"),e("ul",[e("li",[e("code",[v._v("List")]),v._v("：元素有序、可重复的集合\n"),e("ul",[e("li",[e("code",[v._v("ArrayList")]),v._v("、"),e("code",[v._v("LinkedList")]),v._v("、"),e("code",[v._v("Vector")])])])]),v._v(" "),e("li",[e("code",[v._v("Set")]),v._v("：元素无序、不可重复的集合\n"),e("ul",[e("li",[e("code",[v._v("HashSet")]),v._v("、"),e("code",[v._v("LinkedHashSet")]),v._v("、"),e("code",[v._v("TreeSet")])])])])])]),v._v(" "),e("li",[e("code",[v._v("Map")]),v._v("接口：双列数据，保存具有映射关系“"),e("code",[v._v("key-value对")]),v._v("”的集合，也称为"),e("strong",[v._v("键值对")]),v._v("。\n"),e("ul",[e("li",[e("code",[v._v("HashMap")]),v._v("、"),e("code",[v._v("LinkedHashMap")]),v._v("、"),e("code",[v._v("TreeMap")]),v._v("、"),e("code",[v._v("Hashtable")]),v._v("、"),e("code",[v._v("Properties")])])])])]),v._v(" "),e("p",[e("strong",[v._v("现在我们开始学习List接口。")])]),v._v(" "),e("h2",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[v._v("#")]),v._v(" 概述")]),v._v(" "),e("ul",[e("li",[v._v("鉴于"),e("code",[v._v("Java")]),v._v("中数组用来存储数据的局限性，我们通常使用"),e("code",[v._v("List")]),v._v("替代数组")]),v._v(" "),e("li",[e("code",[v._v("List")]),v._v("集合类中"),e("strong",[v._v("元素有序")]),v._v("、"),e("strong",[v._v("且可重复")]),v._v("，集合中的每个元素都有其对应的顺序索引。")]),v._v(" "),e("li",[e("code",[v._v("List")]),v._v("容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。")]),v._v(" "),e("li",[e("code",[v._v("JDK API")]),v._v("中"),e("code",[v._v("List")]),v._v("接口的实现类常用的有："),e("code",[v._v("ArrayList")]),v._v("、"),e("code",[v._v("LinkedList")]),v._v("和"),e("code",[v._v("Vector")]),v._v("。")])]),v._v(" "),e("h2",{attrs:{id:"list接口方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list接口方法"}},[v._v("#")]),v._v(" List接口方法")]),v._v(" "),e("p",[e("code",[v._v("List")]),v._v("除了从"),e("code",[v._v("Collection")]),v._v("集合继承的方法外，"),e("code",[v._v("List")]),v._v(" 集合里添加了一些根据索引来操作集合元素的方法。")]),v._v(" "),e("ul",[e("li",[e("strong",[e("code",[v._v("void add(int index, Object ele)")]),v._v(":在"),e("code",[v._v("index")]),v._v("位置插入"),e("code",[v._v("ele")]),v._v("元素")])]),v._v(" "),e("li",[e("code",[v._v("boolean addAll(int index, Collection eles)")]),v._v(":从"),e("code",[v._v("index")]),v._v("位置开始将"),e("code",[v._v("eles")]),v._v("中的所有元素添加进来")]),v._v(" "),e("li",[e("strong",[e("code",[v._v("Object get(int index)")]),v._v(":获取指定"),e("code",[v._v("index")]),v._v("位置的元素")])]),v._v(" "),e("li",[e("code",[v._v("int indexOf(Object obj)")]),v._v(":返回obj在集合中首次出现的位置，如果找不到返回-1。")]),v._v(" "),e("li",[e("code",[v._v("int lastIndexOf(Object obj)")]),v._v(":返回obj在当前集合中末次出现的位置")]),v._v(" "),e("li",[e("strong",[e("code",[v._v("Object remove(int index)")]),v._v(":移除指定index位置的元素，并返回此元素")]),v._v("。\n"),e("ul",[e("li",[v._v("注意父类"),e("code",[v._v("Collection")]),v._v("也有一个方法是 "),e("code",[v._v("boolean remove(Object obj)")]),v._v(" "),e("ul",[e("li",[v._v("通过元素的"),e("code",[v._v("equals")]),v._v("方法判断是否是要删除的那个元素。只会删除找到的第一个元素。")])])]),v._v(" "),e("li",[v._v("所以List类可以按索引或者对象来删除。")])])]),v._v(" "),e("li",[e("strong",[e("code",[v._v("Object set(int index, Object ele)")]),v._v(":设置指定index位置的元素为ele")])]),v._v(" "),e("li",[e("code",[v._v("List subList(int fromIndex, int toIndex)")]),v._v(":返回从fromIndex到toIndex位置的子集合（左闭右开区间）\n"),e("ul",[e("li",[v._v("本身list不会改变。")])])])]),v._v(" "),e("h2",{attrs:{id:"面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[v._v("#")]),v._v(" 面试题")]),v._v(" "),e("blockquote",[e("p",[v._v("请问"),e("code",[v._v("ArrayList")]),v._v("/"),e("code",[v._v("LinkedList")]),v._v("/"),e("code",[v._v("Vector")]),v._v("的异同？谈谈你的理解？"),e("code",[v._v("ArrayList")]),v._v("底层是什么？扩容机制？"),e("code",[v._v("Vector")]),v._v("和"),e("code",[v._v("ArrayList")]),v._v("的最大区别?")])]),v._v(" "),e("p",[e("strong",[v._v("ArrayList和LinkedList的异同")])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("二者都线程不安全，相对线程安全的"),e("code",[v._v("Vector")]),v._v("，执行效率高。")])]),v._v(" "),e("li",[e("p",[v._v("此外，"),e("code",[v._v("ArrayList")]),v._v("是实现了基于动态数组的数据结构，"),e("code",[v._v("LinkedList")]),v._v("基于链表的数据结构。")])]),v._v(" "),e("li",[e("p",[v._v("对于随机访问"),e("code",[v._v("get")]),v._v("和"),e("code",[v._v("set")]),v._v("，"),e("code",[v._v("ArrayList")]),v._v("优于"),e("code",[v._v("LinkedList")]),v._v("，因为"),e("code",[v._v("LinkedList")]),v._v("要移动指针。")])]),v._v(" "),e("li",[e("p",[v._v("对于新增和删除操作"),e("code",[v._v("add(特指插入)")]),v._v("和"),e("code",[v._v("remove")]),v._v("，"),e("code",[v._v("LinkedList")]),v._v("比较占优势，因为"),e("code",[v._v("ArrayList")]),v._v("要移动数据。")])])]),v._v(" "),e("p",[e("strong",[v._v("ArrayList和Vector的区别")])]),v._v(" "),e("ul",[e("li",[e("p",[e("code",[v._v("Vector")]),v._v("和"),e("code",[v._v("ArrayList")]),v._v("几乎是完全相同的,唯一的区别在于"),e("code",[v._v("Vector")]),v._v("是同步类("),e("code",[v._v("synchronized")]),v._v(")，属于强同步类。因此开销就比"),e("code",[v._v("ArrayList")]),v._v("要大，访问要慢。")])]),v._v(" "),e("li",[e("p",[v._v("正常情况下,大多数的Java程序员使用"),e("code",[v._v("ArrayList")]),v._v("而不是"),e("code",[v._v("Vector")]),v._v(",因为同步完全可以由程序员自己来控制。")])]),v._v(" "),e("li",[e("p",[e("strong",[e("code",[v._v("Vector")]),v._v("每次扩容请求其大小的2倍空间，而"),e("code",[v._v("ArrayList")]),v._v("是1.5倍。")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("Vector")]),v._v("还有一个子类"),e("code",[v._v("Stack")]),v._v("。")])])]),v._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),e("blockquote",[e("p",[e("code",[v._v("ArrayList")]),v._v("、"),e("code",[v._v("LinkedList")]),v._v("和"),e("code",[v._v("Vector")]),v._v("三者的异同")])]),v._v(" "),e("p",[e("strong",[v._v("同：")])]),v._v(" "),e("ul",[e("li",[v._v("三各类都是实现了List接口， 存储数据的特点相同：存储有序的、可重复的数据。")])]),v._v(" "),e("p",[e("strong",[v._v("不同：")])]),v._v(" "),e("ul",[e("li",[e("code",[v._v("ArrayList")]),v._v("：作为List接口的主要实现类，线程不安全的，效率高；底层使用"),e("strong",[v._v("动态数组")]),v._v("存储")]),v._v(" "),e("li",[e("code",[v._v("LinkedList")]),v._v("：对于频繁的插入、删除操作，使用此类比"),e("code",[v._v("Arraylist")]),v._v("效率高；底层使用双向链表存储")]),v._v(" "),e("li",[e("code",[v._v("Vector")]),v._v("：作为List接口的古老实现类，线程安全的，效率低；底层使用"),e("strong",[v._v("动态数组")]),v._v("存储")])]),v._v(" "),e("blockquote",[e("p",[e("strong",[v._v("常用方法")])])]),v._v(" "),e("ul",[e("li",[v._v("增："),e("code",[v._v("add(Object obj)")])]),v._v(" "),e("li",[v._v("删："),e("code",[v._v("remove(int index)")]),v._v(" / "),e("code",[v._v("remove(Object obj)")])]),v._v(" "),e("li",[v._v("改："),e("code",[v._v("set(int index, Object ele)")])]),v._v(" "),e("li",[v._v("查："),e("code",[v._v("get(int index)")])]),v._v(" "),e("li",[v._v("插："),e("code",[v._v("add(int index,Object obj)")])]),v._v(" "),e("li",[v._v("长度："),e("code",[v._v("size()")])]),v._v(" "),e("li",[v._v("遍历：\n"),e("ul",[e("li",[v._v("1、"),e("code",[v._v("Iterator")]),v._v("迭代器")]),v._v(" "),e("li",[v._v("2、增强"),e("code",[v._v("for")]),v._v("循环")]),v._v(" "),e("li",[v._v("3、普通"),e("code",[v._v("for")]),v._v("循环")])])])])])}),[],!1,null,null,null);_.default=t.exports}}]);